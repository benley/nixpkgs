diff -Nau linux-head/sound/soc/codecs/rt5677.c chromiumos-chromeos-3.14/sound/soc/codecs/rt5677.c
--- linux-head/sound/soc/codecs/rt5677.c	2015-06-18 18:56:44.686665895 -0700
+++ chromiumos-chromeos-3.14/sound/soc/codecs/rt5677.c	2015-06-15 23:15:50.876647997 -0700
@@ -4820,11 +4820,8 @@
 static void rt5677_free_gpio(struct i2c_client *i2c)
 {
 	struct rt5677_priv *rt5677 = i2c_get_clientdata(i2c);
-	int ret;
 
+	gpiochip_remove(&rt5677->gpio_chip);
-	ret = gpiochip_remove(&rt5677->gpio_chip);
-	if (ret != 0)
-		dev_err(&i2c->dev, "Failed to remove GPIOs: %d\n", ret);
 }
 #else
 static void rt5677_gpio_config(struct rt5677_priv *rt5677, unsigned offset,
diff -Nau linux-head/sound/soc/intel/boards/bdw-rt5677.c chromiumos-chromeos-3.14/sound/soc/intel/bdw-rt5677.c
--- linux-head/sound/soc/intel/boards/bdw-rt5677.c	2015-06-18 18:52:58.953332967 -0700
+++ chromiumos-chromeos-3.14/sound/soc/intel/bdw-rt5677.c	2015-06-15 23:15:50.903314664 -0700
@@ -12,10 +12,10 @@
 #include <sound/pcm_params.h>
 #include <sound/jack.h>
 
+#include "../common/sst-dsp.h"
+#include "../haswell/sst-haswell-ipc.h"
-#include "sst-dsp.h"
-#include "sst-haswell-ipc.h"
 
+#include "../../codecs/rt5677.h"
-#include "../codecs/rt5677.h"
 
 /* GPIO indexes defined by ACPI */
 enum {
diff -Nau linux-head/sound/soc/intel/boards/broadwell.c chromiumos-chromeos-3.14/sound/soc/intel/broadwell.c
--- linux-head/sound/soc/intel/boards/broadwell.c	2015-06-18 19:08:15.913331320 -0700
+++ chromiumos-chromeos-3.14/sound/soc/intel/broadwell.c	2015-06-15 23:15:50.903314664 -0700
@@ -22,10 +22,10 @@
 #include <sound/jack.h>
 #include <sound/pcm_params.h>
 
+#include "../common/sst-dsp.h"
+#include "../haswell/sst-haswell-ipc.h"
-#include "sst-dsp.h"
-#include "sst-haswell-ipc.h"
 
+#include "../../codecs/rt286.h"
-#include "../codecs/rt286.h"
 
 static struct snd_soc_jack broadwell_hp;
 static struct snd_soc_jack broadwell_mic;
diff -Nau linux-head/sound/soc/intel/haswell/sst-haswell-dsp.c chromiumos-chromeos-3.14/sound/soc/intel/sst-haswell-dsp.c
--- linux-head/sound/soc/intel/haswell/sst-haswell-dsp.c	2015-06-18 18:53:46.543332882 -0700
+++ chromiumos-chromeos-3.14/sound/soc/intel/sst-haswell-dsp.c	2015-06-15 23:15:50.903314664 -0700
@@ -28,10 +28,10 @@
 #include <linux/firmware.h>
 #include <linux/pm_runtime.h>
 
+#include "../common/sst-dsp.h"
+#include "../common/sst-dsp-priv.h"
-#include "sst-dsp.h"
-#include "sst-dsp-priv.h"
 #include "sst-haswell-ipc.h"
+#include "../common/sst-debugfs.h"
-#include "sst-debugfs.h"
 
 #include <trace/events/hswadsp.h>
 
diff -Nau linux-head/sound/soc/intel/haswell/sst-haswell-ipc.c chromiumos-chromeos-3.14/sound/soc/intel/sst-haswell-ipc.c
--- linux-head/sound/soc/intel/haswell/sst-haswell-ipc.c	2015-06-18 18:53:59.033332859 -0700
+++ chromiumos-chromeos-3.14/sound/soc/intel/sst-haswell-ipc.c	2015-06-15 23:15:50.903314664 -0700
@@ -37,8 +37,8 @@
 
 
 #include "sst-haswell-ipc.h"
+#include "../common/sst-dsp.h"
+#include "../common/sst-dsp-priv.h"
-#include "sst-dsp.h"
-#include "sst-dsp-priv.h"
 
 /* Global Message - Generic */
 #define IPC_GLB_TYPE_SHIFT	24
@@ -1758,7 +1758,6 @@
 	sst_module_runtime_free(runtime);
 }
 
-#ifdef CONFIG_PM_RUNTIME
 static int sst_hsw_dx_state_dump(struct sst_hsw *hsw)
 {
 	struct sst_dsp *sst = hsw->dsp;
@@ -2129,7 +2128,7 @@
 	int i;
 	struct snd_dma_buffer *dma_buf[2];
 	static struct dentry *fwdir;
-	
+
 	dma_buf[0] = devm_kzalloc(hsw->dsp->dev, sizeof(*dma_buf[0]), GFP_KERNEL);
 	dma_buf[1] = devm_kzalloc(hsw->dsp->dev, sizeof(*dma_buf[1]), GFP_KERNEL);
 	memset(log_stream->config, 0xFF, sizeof(log_stream->config));
@@ -2203,12 +2202,10 @@
 			&hsw->log_stream, &fw_log_config_fops))
 		pr_warn("ASoC: Failed to create fw_log_config debugfs file\n");
 
-#ifdef CONFIG_PM_RUNTIME
 	if (!debugfs_create_file("suspend_stats", 0444, fwdir,
 			&hsw->log_stream, &suspend_stats_fops))
 		pr_warn("ASoC: Failed to create suspend_stats file\n");
 #endif
-#endif
 	return 0;
 }
 EXPORT_SYMBOL(sst_hsw_dbg_enable);
@@ -2367,7 +2364,6 @@
 
 	return ret;
 }
-#endif
 
 static int msg_empty_list_init(struct sst_hsw *hsw)
 {
diff -Nau linux-head/sound/soc/intel/haswell/sst-haswell-pcm.c chromiumos-chromeos-3.14/sound/soc/intel/sst-haswell-pcm.c
--- linux-head/sound/soc/intel/haswell/sst-haswell-pcm.c	2015-06-18 18:55:53.169999321 -0700
+++ chromiumos-chromeos-3.14/sound/soc/intel/sst-haswell-pcm.c	2015-06-15 23:15:50.903314664 -0700
@@ -30,9 +30,9 @@
 #include <sound/compress_driver.h>
 
 #include "sst-haswell-ipc.h"
+#include "../common/sst-dsp-priv.h"
+#include "../common/sst-dsp.h"
+#include "../common/sst-debugfs.h"
-#include "sst-dsp-priv.h"
-#include "sst-dsp.h"
-#include "sst-debugfs.h"
 
 #define HSW_PCM_COUNT		6
 #define HSW_VOLUME_MAX		0x7FFFFFFF	/* 0dB */
@@ -1003,7 +1003,6 @@
 }
 
 #ifdef CONFIG_PM
-#ifdef CONFIG_PM_RUNTIME
 
 static int hsw_pcm_runtime_idle(struct device *dev)
 {
@@ -1152,14 +1151,6 @@
 	return 0;
 }
 
-#else
-#define hsw_pcm_runtime_idle		NULL
-#define hsw_pcm_runtime_suspend		NULL
-#define hsw_pcm_runtime_resume		NULL
-#define hsw_pcm_runtime_complete	NULL
-#define hsw_pcm_runtime_prepare		NULL
-#endif
-
 static const struct dev_pm_ops hsw_pcm_pm = {
 	.runtime_idle = hsw_pcm_runtime_idle,
 	.runtime_suspend = hsw_pcm_runtime_suspend,
diff -Nau linux-head/sound/soc/soc-jack.c chromiumos-chromeos-3.14/sound/soc/soc-jack.c
--- linux-head/sound/soc/soc-jack.c	2015-09-01 18:55:53.169999321 -0700
+++ chromiumos-chromeos-3.14/sound/soc/soc-jack.c	2015-09-01 23:15:50.903314664 -0700
@@ -44,5 +44,5 @@
 	BLOCKING_INIT_NOTIFIER_HEAD(&jack->notifier);
 
-	return snd_jack_new(codec->component.card->snd_card, id, type, &jack->jack);
+	return snd_jack_new(codec->component.card->snd_card, id, type, &jack->jack, false, false);
 }
 EXPORT_SYMBOL_GPL(snd_soc_jack_new);
 /**
diff -Nau linux-head/include/sound/soc.h chromiumos-chromeos-3.14/include/sound/soc.h
--- linux-head/include/sound/soc.h	2015-09-01 18:55:53.169999321 -0700
+++ chromiumos-chromeos-3.14/include/sound/soc.h	2015-09-01 23:15:50.903314664 -0700
@@ -1240,4 +1240,56 @@
 }
 
+/**
+ * snd_soc_codec_get_dapm() - Returns the DAPM context for the CODEC
+ * @codec: The CODEC for which to get the DAPM context
+ *
+ * Note: Use this function instead of directly accessing the CODEC's dapm field
+ */
+static inline struct snd_soc_dapm_context *snd_soc_codec_get_dapm(
+	struct snd_soc_codec *codec)
+{
+	return &codec->dapm;
+}
+
+/**
+ * snd_soc_dapm_init_bias_level() - Initialize CODEC DAPM bias level
+ * @dapm: The CODEC for which to initialize the DAPM bias level
+ * @level: The DAPM level to initialize to
+ *
+ * Initializes the CODEC DAPM bias level. See snd_soc_dapm_init_bias_level().
+ */
+static inline void snd_soc_codec_init_bias_level(struct snd_soc_codec *codec,
+	enum snd_soc_bias_level level)
+{
+	snd_soc_dapm_init_bias_level(snd_soc_codec_get_dapm(codec), level);
+}
+
+/**
+ * snd_soc_dapm_get_bias_level() - Get current CODEC DAPM bias level
+ * @codec: The CODEC for which to get the DAPM bias level
+ *
+ * Returns: The current DAPM bias level of the CODEC.
+ */
+static inline enum snd_soc_bias_level snd_soc_codec_get_bias_level(
+	struct snd_soc_codec *codec)
+{
+	return snd_soc_dapm_get_bias_level(snd_soc_codec_get_dapm(codec));
+}
+
+/**
+ * snd_soc_codec_force_bias_level() - Set the CODEC DAPM bias level
+ * @codec: The CODEC for which to set the level
+ * @level: The level to set to
+ *
+ * Forces the CODEC bias level to a specific state. See
+ * snd_soc_dapm_force_bias_level().
+ */
+static inline int snd_soc_codec_force_bias_level(struct snd_soc_codec *codec,
+	enum snd_soc_bias_level level)
+{
+	return snd_soc_dapm_force_bias_level(snd_soc_codec_get_dapm(codec),
+		level);
+}
+
 /**
  * snd_soc_component_get_dapm() - Returns the DAPM context associated with a
diff -Nau linux-head/include/sound/soc-dapm.h chromiumos-chromeos-3.14/include/sound/soc-dapm.h
--- linux-head/include/sound/soc-dapm.h	2015-09-01 18:55:53.169999321 -0700
+++ chromiumos-chromeos-3.14/include/sound/soc-dapm.h	2015-09-01 23:15:50.903314664 -0700
@@ -456,6 +456,9 @@
 struct snd_soc_dapm_context *snd_soc_dapm_kcontrol_dapm(
 	struct snd_kcontrol *kcontrol);
 
+int snd_soc_dapm_force_bias_level(struct snd_soc_dapm_context *dapm,
+	enum snd_soc_bias_level level);
+
 /* dapm widget types */
 enum snd_soc_dapm_type {
 	snd_soc_dapm_input = 0,		/* input pin */
diff -Nau linux-head/include/sound/soc-dapm.h chromiumos-chromeos-3.14/include/sound/soc-dapm.h
--- linux-head/include/sound/soc-dapm.h	2015-09-01 18:55:53.169999321 -0700
+++ chromiumos-chromeos-3.14/include/sound/soc-dapm.h	2015-09-01 23:15:50.903314664 -0700
@@ -634,4 +637,35 @@
 	int neighbour_checks;
 };
 
+/**
+ * snd_soc_dapm_init_bias_level() - Initialize DAPM bias level
+ * @dapm: The DAPM context to initialize
+ * @level: The DAPM level to initialize to
+ *
+ * This function only sets the driver internal state of the DAPM level and will
+ * not modify the state of the device. Hence it should not be used during normal
+ * operation, but only to synchronize the internal state to the device state.
+ * E.g. during driver probe to set the DAPM level to the one corresponding with
+ * the power-on reset state of the device.
+ *
+ * To change the DAPM state of the device use snd_soc_dapm_set_bias_level().
+ */
+static inline void snd_soc_dapm_init_bias_level(
+	struct snd_soc_dapm_context *dapm, enum snd_soc_bias_level level)
+{
+	dapm->bias_level = level;
+}
+
+/**
+ * snd_soc_dapm_get_bias_level() - Get current DAPM bias level
+ * @dapm: The context for which to get the bias level
+ *
+ * Returns: The current bias level of the passed DAPM context.
+ */
+static inline enum snd_soc_bias_level snd_soc_dapm_get_bias_level(
+	struct snd_soc_dapm_context *dapm)
+{
+	return dapm->bias_level;
+}
+
 #endif
diff -Nau linux-head/sound/soc/soc-dapm.c chromiumos-chromeos-3.14/sound/soc/soc-dapm.c
--- linux-head/sound/soc/soc-dapm.c	2015-09-01 18:55:53.169999321 -0700
+++ chromiumos-chromeos-3.14/sound/soc/soc-dapm.c	2015-09-01 23:15:50.903314664 -0700
@@ -429,6 +429,35 @@
 }
 
 /**
+ * snd_soc_dapm_force_bias_level() - Sets the DAPM bias level
+ * @dapm: The DAPM context for which to set the level
+ * @level: The level to set
+ *
+ * Forces the DAPM bias level to a specific state. It will call the bias level
+ * callback of DAPM context with the specified level. This will even happen if
+ * the context is already at the same level. Furthermore it will not go through
+ * the normal bias level sequencing, meaning any intermediate states between the
+ * current and the target state will not be entered.
+ *
+ * Note that the change in bias level is only temporary and the next time
+ * snd_soc_dapm_sync() is called the state will be set to the level as
+ * determined by the DAPM core. The function is mainly intended to be used to
+ * used during probe or resume from suspend to power up the device so
+ * initialization can be done, before the DAPM core takes over.
+ */
+int snd_soc_dapm_force_bias_level(struct snd_soc_dapm_context *dapm,
+	enum snd_soc_bias_level level)
+{
+	int ret = 0;
+
+	if (dapm->set_bias_level)
+		ret = dapm->set_bias_level(dapm, level);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(snd_soc_dapm_force_bias_level);
+
+/**
  * snd_soc_dapm_set_bias_level - set the bias level for the system
  * @dapm: DAPM context
  * @level: level to configure
